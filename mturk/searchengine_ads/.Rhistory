# by applying
remaining_pairs <- lapply(get_pairs(remaining), function(remaining_pairs){
return(c(pair, remaining_pairs))
})
my_pairs <- c(my_pairs, remaining_pairs)
}
return(my_pairs)
}
(x1 <- get_pairs(x))
get_pairs <- function(vec){
# base case: there's only a single pair
if (length(vec) == 2)
return(list(vec))
# otherwise, keep a running list of pairs to add to
my_pairs <- list()
for (i in 2:length(vec)){
# loop over all possible pairs including student 1
pair <- c(vec[1], vec[i])
# exclude these pairs from the set of remaining unpaired students
remaining <- setdiff(vec, pair)
# and recursively call the function to find the remaining pairs
# by applying
remaining_pairs <- lapply(get_pairs(remaining), function(remaining_pairs){
return(c(pair, remaining_pairs))
})
my_pairs <- c(my_pairs, remaining_pairs)
}
return(my_pairs)
}
(x1 <- get_pairs(x))
# a function to return the list of all possible pairs of students
# (where the pairs are in order, i.e. pair 1 = students 1 & 2, etc.)
get_pairs <- function(vec){
# base case: there's only a single pair
if (length(vec) == 2)
return(list(vec))
# otherwise, keep a running list of pairs to add to
my_pairs <- list()
for (i in 2:length(vec)){
# loop over all possible pairs including student 1
pair <- c(vec[1], vec[i])
# exclude these pairs from the set of remaining unpaired students
remaining <- setdiff(vec, pair)
# and recursively call the function to find the remaining pairs
# by applying
remaining_pairs <- lapply(get_pairs(remaining), function(remaining_pairs){
return(c(pair, remaining_pairs))
})
my_pairs <- c(my_pairs, remaining_pairs)
}
return(my_pairs)
}
vec
vec<-x
# base case: there's only a single pair
if (length(vec) == 2)
return(list(vec))
# otherwise, keep a running list of pairs to add to
my_pairs <- list()
i <- 2
# loop over all possible pairs including student 1
pair <- c(vec[1], vec[i])
# exclude these pairs from the set of remaining unpaired students
remaining <- setdiff(vec, pair)
get_pairs(remaining)
# a function that takes a vector of students and returns a list of vectors,
# where each vector contains a possible pairing of students
# (where the pairs are in order, i.e. pair 1 = students 1 & 2, etc.)
get_pairs <- function(vec){
# base case: there's only a single pair, return a list of a single vector
if (length(vec) == 2)
return(list(vec))
# otherwise, keep a running list of student pairings to add to
my_pairs <- list()
for (i in 2:length(vec)){
# loop over all possible pairs including student 1
pair <- c(vec[1], vec[i])
# exclude these pairs from the set of remaining unpaired students
remaining <- setdiff(vec, pair)
# recursively call this function to obtain
# the list of all possible pairs of students excluding our current pair
# and use lapply (list-apply) to append our current pair to each vector in the list
remaining_pairs <- lapply(get_pairs(remaining), function(remaining_pairs){
return(c(pair, remaining_pairs))
})
# increment our running list of pairings
my_pairs <- c(my_pairs, remaining_pairs)
}
# return the final list of all possible vectors that organize students into pairs
return(my_pairs)
}
(x1 <- get_pairs(x))
setwd("~/GitHub/ArticleComparisons/mturk/searchengine_ads")
library(tidyverse)
library(lubridate)
image_dir <- "images"
data_dir <- "data"
samp <- read.csv("sample_images.csv")
samp
results <- read.csv(file.path(data_dir, "question_responses.tsv"), sep = "\t")
results$response <- as.numeric(gsub("b'(.*)'", "\\1", results$response))
print(sprintf("All participants consented: %s", all(results$response[results$module == "consent"] == 1)))
response_times <- read.csv(file.path(data_dir, "task_submission_times.tsv"), sep = "\t")
results <- results %>%
filter(taskid >= 10) %>%
select(taskid, workerid, varname, response) %>%
spread(varname, response) %>%
merge(samp, by = "taskid",
suffixes = c("_label",""))
head(results)
write.csv(results, file.path(data_dir, "searchengine_ads_results.csv"))
results %>%
group_by(taskid, image) %>%
summarize(n_labels = n())
head(results)
library(tidyverse)
library(lubridate)
image_dir <- "images"
data_dir <- "data"
samp <- read.csv("sample_images.csv")
samp
results <- read.csv(file.path(data_dir, "question_responses.tsv"), sep = "\t")
results$response <- as.numeric(gsub("b'(.*)'", "\\1", results$response))
print(sprintf("All participants consented: %s", all(results$response[results$module == "consent"] == 1)))
response_times <- read.csv(file.path(data_dir, "task_submission_times.tsv"), sep = "\t")
response_times
response_times %>%
group_by(workerid) %>%
summarize(time_spent = max(submitted_at) - min(submitted_at))
response_times <- read.csv(file.path(data_dir, "task_submission_times.tsv"),
sep = "\t") %>%
mutate(submitted_at = as.Date(submitted_at))
head(submitted_at)
head(response_times)
library(tidyverse)
library(lubridate)
time_length
?time_length
timelength(response_times$submitted_at)
time_length(response_times$submitted_at)
time_length(response_times$submitted_at)
response_times <- read.csv(file.path(data_dir, "task_submission_times.tsv"),
sep = "\t") %>%
mutate(submitted_at = as.Date(submitted_at))
response_times <- read.csv(file.path(data_dir, "task_submission_times.tsv"),
sep = "\t")
response_times <- read.csv(file.path(data_dir, "task_submission_times.tsv"),
sep = "\t")
head(response_times)
as_datetime(submitted_at)
as_datetime(response_times$submitted_at)
response_times <- read.csv(file.path(data_dir, "task_submission_times.tsv"),
sep = "\t") %>%
mutate(submitted_at = as.datetime(submitted_at))
response_times <- read.csv(file.path(data_dir, "task_submission_times.tsv"),
sep = "\t") %>%
mutate(submitted_at = as_datetime(submitted_at))
response_times %>%
group_by(workerid) %>%
summarize(time_spent = max(submitted_at) - min(submitted_at))
response_times <- read.csv(file.path(data_dir, "task_submission_times.tsv"),
sep = "\t") %>%
mutate(submitted_at = as_datetime(submitted_at)) %>%
group_by(workerid) %>%
summarize(time_spent = max(submitted_at) - min(submitted_at))
head(response_times)
response_times <- read.csv(file.path(data_dir, "task_submission_times.tsv"),
sep = "\t") %>%
mutate(submitted_at = as_datetime(submitted_at)) %>%
group_by(workerid) %>%
summarize(time_spent = max(submitted_at) - min(submitted_at),
tasks_completed = n())
response_times
response_times <- read.csv(file.path(data_dir, "task_submission_times.tsv"),
sep = "\t") %>%
mutate(submitted_at = as_datetime(submitted_at)) %>%
group_by(workerid) %>%
summarize(time_spent = max(submitted_at) - min(submitted_at),
tasks_completed = n()) %>%
arrange(time_spent)
head(response_times)
response_times
tail(response_times)
hist(response_times$time_spent)
hist(as.numeric(response_times$time_spent))
results %>%
filter(taskid >= 10) %>%
select(taskid, workerid, varname, response)
results %>%
filter(taskid >= 10) %>%
select(taskid, workerid, varname, response) %>%
spread(varname, response) %>%
merge(samp, by = "taskid",
suffixes = c("_label",""))
results %>%
filter(taskid >= 10) %>%
select(taskid, workerid, varname, response) %>%
spread(varname, response)
results %>%
filter(taskid >= 10) %>%
select(taskid, workerid, varname, response) %>%
spread(varname, response) %>%
merge(response_times, by = "workerid")
results %>%
filter(taskid >= 10) %>%
select(taskid, workerid, varname, response) %>%
spread(varname, response) %>%
merge(response_times, by = "workerid") %>%
View()
results %>%
filter(taskid >= 10) %>%
select(taskid, workerid, varname, response) %>%
spread(varname, response) %>%
merge(response_times, by = "workerid") %>%
arrange(taskid, time_spent)
results %>%
filter(taskid >= 10) %>%
select(taskid, workerid, varname, response) %>%
spread(varname, response) %>%
merge(response_times, by = "workerid") %>%
arrange(taskid, time_spent) %>%
View()
samp
head(samp)
results %>%
filter(taskid >= 10) %>%
select(taskid, workerid, varname, response) %>%
spread(varname, response) %>%
merge(response_times, by = "workerid") %>%
arrange(taskid, time_spent)
response_times <- read.csv(file.path(data_dir, "task_submission_times.tsv"),
sep = "\t") %>%
mutate(submitted_at = as_datetime(submitted_at)) %>%
group_by(workerid) %>%
summarize(time_spent = max(submitted_at) - min(submitted_at)) %>%
arrange(time_spent)
results %>%
filter(taskid >= 10) %>%
select(taskid, workerid, varname, response) %>%
spread(varname, response) %>%
merge(response_times, by = "workerid") %>%
arrange(taskid, time_spent)
head(samp)
merge(samp, by = "taskid", suffixes = c("_label",""))
results %>%
filter(taskid >= 10) %>%
select(taskid, workerid, varname, response) %>%
spread(varname, response) %>%
merge(response_times, by = "workerid") %>%
arrange(taskid, time_spent) %>%
merge(samp, by = "taskid", suffixes = c("_label",""))
labcol <- paste0(linktype, "_label")
results <- results %>%
filter(taskid >= 10) %>%
select(taskid, workerid, varname, response) %>%
spread(varname, response) %>%
merge(response_times, by = "workerid") %>%
arrange(taskid, time_spent) %>%
merge(samp, by = "taskid", suffixes = c("_label",""))
head(results)
for (linktype in colnames(samp)[3:6]){
labcol <- paste0(linktype, "_label")
results[, paste0("diff_", linktype)] <- results[, linktype] - results[, labcol]
}
head(results)
summary(results)
results <- read.csv(file.path(data_dir, "question_responses.tsv"), sep = "\t")
results$response <- as.numeric(gsub("b'(.*)'", "\\1", results$response))
print(sprintf("All participants consented: %s", all(results$response[results$module == "consent"] == 1)))
response_times <- read.csv(file.path(data_dir, "task_submission_times.tsv"),
sep = "\t") %>%
mutate(submitted_at = as_datetime(submitted_at)) %>%
group_by(workerid) %>%
summarize(time_spent = max(submitted_at) - min(submitted_at)) %>%
arrange(time_spent)
head(results)
results <- read.csv(file.path(data_dir, "question_responses.tsv"), sep = "\t") %>%
mutate(response = as.numeric(gsub("b'(.*)'", "\\1", response)))
head(results)
head(response_times)
results %>%
group_by(taskid) %>%
mutate(response_standardized = (response - mean(response)/sd(response)))
results %>%
filter(taskid >= 10) %>%
group_by(taskid) %>%
mutate(response_standardized = (response - mean(response)/sd(response)))
results %>%
filter(taskid >= 10) %>%
group_by(taskid) %>%
mutate(response_standardized = (response - mean(response)/sd(response))) %>%
group_by(workerid) %>%
mutate(mean_standardized_response = mean(response_standardized))
results %>%
filter(taskid >= 10) %>%
group_by(taskid) %>%
mutate(response_standardized = (response - mean(response)/sd(response))) %>%
group_by(workerid) %>%
summary(mean_standardized_response = mean(response_standardized))
results %>%
filter(taskid >= 10) %>%
group_by(taskid) %>%
mutate(response_standardized = (response - mean(response)/sd(response))) %>%
group_by(workerid) %>%
summarize(mean_standardized_response = mean(response_standardized))
results %>%
filter(taskid >= 10) %>%
group_by(taskid) %>%
mutate(response_standardized = (response - mean(response)/sd(response))) %>%
group_by(workerid) %>%
summarize(mean_standardized_response = mean(response_standardized)) %>%
merge(response_times)
results %>%
filter(taskid >= 10) %>%
group_by(taskid) %>%
mutate(response_standardized = (response - mean(response)/sd(response))) %>%
group_by(workerid) %>%
summarize(mean_standardized_response = mean(response_standardized)) %>%
merge(response_times) %>%
arrange(mean_standardized_response)
response_times <- read.csv(file.path(data_dir, "task_submission_times.tsv"),
sep = "\t") %>%
mutate(submitted_at = as_datetime(submitted_at)) %>%
group_by(workerid) %>%
summarize(time_spent = max(submitted_at) - min(submitted_at)) %>%
arrange(time_spent) %>%
merge(results %>%
filter(taskid >= 10) %>%
group_by(taskid) %>%
mutate(response_standardized = (response - mean(response)/sd(response))) %>%
group_by(workerid) %>%
summarize(mean_standardized_response = mean(response_standardized)))
head(response_times)
plot(response_times$time_spent, response_times$mean_standardized_response)
response_times <- read.csv(file.path(data_dir, "task_submission_times.tsv"),
sep = "\t") %>%
mutate(submitted_at = as_datetime(submitted_at)) %>%
group_by(workerid) %>%
summarize(time_spent = max(submitted_at) - min(submitted_at)) %>%
arrange(time_spent) %>%
merge(results %>%
filter(taskid >= 10) %>%
group_by(taskid) %>%
mutate(response_standardized = (response - mean(response)/sd(response))) %>%
group_by(workerid) %>%
summarize(mean_standardized_response = mean(response_standardized))) %>%
arrange(mean_standardized_response)
results <- results %>%
filter(taskid >= 10) %>%
select(taskid, workerid, varname, response) %>%
spread(varname, response) %>%
merge(response_times, by = "workerid") %>%
arrange(taskid, time_spent) %>%
merge(samp, by = "taskid", suffixes = c("_label",""))
head(results)
for (linktype in colnames(samp)[3:6]){
labcol <- paste0(linktype, "_label")
results[, paste0("diff_", linktype)] <- results[, linktype] - results[, labcol]
}
head(results)
merge(results, response_times)
merge(results, response_times) %>% View()
merge(results, response_times) %>% select(workerid, time_spent, mean_standardized_response, contains("diff"))
merge(results, response_times) %>% select(workerid, time_spent, mean_standardized_response, contains("diff")) %>% View()
response_times
response_times$mean_standardized_response > 5
response_times$workerid[response_times$mean_standardized_response > 5]
outliers <- response_times$workerid[response_times$mean_standardized_response > 5]
results <- read.csv(file.path(data_dir, "question_responses.tsv"), sep = "\t") %>%
mutate(response = as.numeric(gsub("b'(.*)'", "\\1", response)))
print(sprintf("All participants consented: %s", all(results$response[results$module == "consent"] == 1)))
response_times <- read.csv(file.path(data_dir, "task_submission_times.tsv"),
sep = "\t") %>%
mutate(submitted_at = as_datetime(submitted_at)) %>%
group_by(workerid) %>%
summarize(time_spent = max(submitted_at) - min(submitted_at)) %>%
arrange(time_spent) %>%
merge(results %>%
filter(taskid >= 10) %>%
group_by(taskid) %>%
mutate(response_standardized = (response - mean(response)/sd(response))) %>%
group_by(workerid) %>%
summarize(mean_standardized_response = mean(response_standardized))) %>%
arrange(mean_standardized_response)
outliers <- response_times$workerid[response_times$mean_standardized_response > 5]
response_times %>%
filter(workerid %in% outliers)
results <- results %>%
filter(taskid >= 10, !(workerid %in% outliers)) %>%
select(taskid, workerid, varname, response) %>%
spread(varname, response) %>%
merge(response_times, by = "workerid") %>%
arrange(taskid, time_spent) %>%
merge(samp, by = "taskid", suffixes = c("_label",""))
head(results)
for (linktype in colnames(samp)[3:6]){
labcol <- paste0(linktype, "_label")
results[, paste0("diff_", linktype)] <- results[, linktype] - results[, labcol]
}
head(results)
write.csv(results, file.path(data_dir, "searchengine_ads_results.csv"))
summary <- results %>%
group_by(taskid, image) %>%
summarize(n_labels = n())
head(results)
#col <- paste0(linktype, "_label")
col <- paste0("diff_", linktype)
for (linktype in colnames(samp)[3:6]){
#col <- paste0(linktype, "_label")
col <- paste0("diff_", linktype)
link_results <- results %>%
group_by(taskid, image) %>%
summarize(mean = mean(!!as.name(col)),
sd = sd(!!as.name(col)))
summary[, paste0("mean_", col)] <- link_results$mean
summary[, paste0("sd_", col)] <- link_results$sd
}
head(summary)
View(summary)
head(results)
results[, paste0("diff_", linktype)] <- results[, labcol] - results[, linktype]
for (linktype in colnames(samp)[3:6]){
labcol <- paste0(linktype, "_label")
results[, paste0("diff_", linktype)] <- results[, labcol] - results[, linktype]
}
write.csv(results, file.path(data_dir, "searchengine_ads_results.csv"))
summary <- results %>%
group_by(taskid, image) %>%
summarize(n_labels = n())
for (linktype in colnames(samp)[3:6]){
#col <- paste0(linktype, "_label")
col <- paste0("diff_", linktype)
link_results <- results %>%
group_by(taskid, image) %>%
summarize(mean = mean(!!as.name(col)),
sd = sd(!!as.name(col)))
summary[, paste0("mean_", col)] <- link_results$mean
summary[, paste0("sd_", col)] <- link_results$sd
}
head(summary)
summary %>%
select(image, contains(mean))
summary %>%
select(image, contains("mean"))
summary %>%
select(image, contains("mean")) %>%
View()
head(summary)
summary %>%
select(image, contains("mean"), contains("sd_"), n_labels)
summary %>%
select(taskid, image, contains("mean"), contains("sd_"), n_labels)
summary <- summary %>%
select(taskid, image, contains("mean"), contains("sd_"), n_labels)
write.csv(summary, file.path(data_dir, "searchengine_ads_results_summary.csv"))
library(tidyverse)
library(lubridate)
image_dir <- "images"
data_dir <- "data"
samp <- read.csv("sample_images.csv")
samp
results <- read.csv(file.path(data_dir, "question_responses.tsv"), sep = "\t") %>%
mutate(response = as.numeric(gsub("b'(.*)'", "\\1", response)))
print(sprintf("All participants consented: %s", all(results$response[results$module == "consent"] == 1)))
response_times <- read.csv(file.path(data_dir, "task_submission_times.tsv"),
sep = "\t") %>%
mutate(submitted_at = as_datetime(submitted_at)) %>%
group_by(workerid) %>%
summarize(time_spent = max(submitted_at) - min(submitted_at)) %>%
arrange(time_spent) %>%
merge(results %>%
filter(taskid >= 10) %>%
group_by(taskid) %>%
mutate(response_standardized = (response - mean(response)/sd(response))) %>%
group_by(workerid) %>%
summarize(mean_standardized_response = mean(response_standardized))) %>%
arrange(mean_standardized_response)
outliers <- response_times$workerid[response_times$mean_standardized_response > 5]
response_times %>%
filter(workerid %in% outliers)
results <- results %>%
filter(taskid >= 10) %>%
select(taskid, workerid, varname, response) %>%
spread(varname, response) %>%
merge(response_times, by = "workerid") %>%
arrange(taskid, time_spent) %>%
merge(samp, by = "taskid", suffixes = c("_label",""))
head(results)
for (linktype in colnames(samp)[3:6]){
labcol <- paste0(linktype, "_label")
results[, paste0("diff_", linktype)] <- results[, labcol] - results[, linktype]
}
write.csv(results, file.path(data_dir, "searchengine_ads_results.csv"))
results <- results %>%
filter(!(workerid %in% outliers))
summary <- results %>%
group_by(taskid, image) %>%
summarize(n_labels = n())
for (linktype in colnames(samp)[3:6]){
#col <- paste0(linktype, "_label")
col <- paste0("diff_", linktype)
link_results <- results %>%
group_by(taskid, image) %>%
summarize(mean = mean(!!as.name(col)),
sd = sd(!!as.name(col)))
summary[, paste0("mean_", col)] <- link_results$mean
summary[, paste0("sd_", col)] <- link_results$sd
}
summary <- summary %>%
select(taskid, image, contains("mean"), contains("sd_"), n_labels)
write.csv(summary, file.path(data_dir, "searchengine_ads_results_summary.csv"))
summary
